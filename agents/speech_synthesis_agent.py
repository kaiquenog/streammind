import re
import os
import traceback
import subprocess
from datetime import datetime
from gtts import gTTS

# Verificar se ffmpeg est√° instalado (necess√°rio para pydub)
def is_ffmpeg_installed():
    try:
        # Tenta executar ffmpeg para ver se est√° instalado
        subprocess.run(['ffmpeg', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)
        return True
    except FileNotFoundError:
        return False

# Importar pydub apenas se ffmpeg estiver dispon√≠vel
FFMPEG_AVAILABLE = is_ffmpeg_installed()
if FFMPEG_AVAILABLE:
    try:
        from pydub import AudioSegment
        PYDUB_AVAILABLE = True
        print("\n‚ÑπÔ∏è DEBUG: pydub e ffmpeg dispon√≠veis para processamento avan√ßado de √°udio")
    except ImportError:
        PYDUB_AVAILABLE = False
        print("\n‚ö†Ô∏è AVISO: pydub n√£o est√° instalado. Usando funcionalidade b√°sica de s√≠ntese de voz.")
else:
    PYDUB_AVAILABLE = False
    print("\n‚ö†Ô∏è AVISO: ffmpeg n√£o est√° instalado. Usando funcionalidade b√°sica de s√≠ntese de voz.")
    print("\n‚ÑπÔ∏è Para instalar ffmpeg: sudo apt-get install ffmpeg (Ubuntu/Debian) ou brew install ffmpeg (macOS)")


def agente_sintetizador_voz(script_texto):
    """Agente que converte o script do podcast em √°udio com formato de podcast"""
    print("\nüîä PASSO 5: Gerando √°udio do podcast...")
    print("Tentando gerar √°udio a partir do script...")
    
    # Verificar se o script √© v√°lido
    if script_texto in ["N√£o foi poss√≠vel gerar um script de podcast sem resumos v√°lidos.", "Ocorreu um erro ao gerar o script do podcast.", "N√£o foi poss√≠vel gerar um script de podcast adequado a partir dos resumos."]:
        print("\n‚ùå ERRO: N√£o h√° script v√°lido para gerar o √°udio.")
        return "N√£o foi poss√≠vel gerar o √°udio do podcast sem um script v√°lido."
    
    # Verificar se o script tem conte√∫do
    if not script_texto or len(script_texto.strip()) < 100:
        print("\n‚ùå ERRO: Script muito curto ou vazio.")
        return "N√£o foi poss√≠vel gerar o √°udio do podcast com um script t√£o curto."
    
    print("\n‚ÑπÔ∏è DEBUG: Script v√°lido detectado. Tamanho: {} caracteres".format(len(script_texto)))
    
    try:
        # Nome base do arquivo de sa√≠da
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        nome_arquivo_final = f"podcast_audio_{timestamp}.mp3"
        print("\n‚ÑπÔ∏è DEBUG: Nome do arquivo de sa√≠da definido: {}".format(nome_arquivo_final))
        
        # Extrair t√≠tulo do podcast do script (assumindo que est√° na primeira linha ap√≥s # ou ## )
        linhas = script_texto.split('\n')
        titulo_podcast = "Podcast StreamMind"  # T√≠tulo padr√£o
        for linha in linhas[:10]:  # Verificar apenas as primeiras linhas
            if linha.startswith('#') and not linha.startswith('##'):
                titulo_podcast = re.sub(r'#+ ', '', linha).strip()
                print(f"\n‚ÑπÔ∏è DEBUG: T√≠tulo do podcast detectado: {titulo_podcast}")
                break
        
        print(f"\n‚ÑπÔ∏è DEBUG: Usando t√≠tulo: {titulo_podcast}")
        
        # Dividir o script em se√ß√µes para processamento separado
        # Identificar se√ß√µes por cabe√ßalhos markdown (##)
        secoes = []
        secao_atual = {"titulo": "Introdu√ß√£o", "conteudo": ""}
        
        print("\n‚ÑπÔ∏è DEBUG: Iniciando divis√£o do script em se√ß√µes...")
        for linha in linhas:
            if linha.startswith('##'):
                if secao_atual["conteudo"].strip():
                    secoes.append(secao_atual)
                    print(f"\n‚ÑπÔ∏è DEBUG: Se√ß√£o adicionada: {secao_atual['titulo']} ({len(secao_atual['conteudo'])} caracteres)")
                secao_atual = {"titulo": re.sub(r'#+ ', '', linha).strip(), "conteudo": ""}
            else:
                secao_atual["conteudo"] += linha + "\n"
        
        # Adicionar a √∫ltima se√ß√£o se tiver conte√∫do
        if secao_atual["conteudo"].strip():
            secoes.append(secao_atual)
            print(f"\n‚ÑπÔ∏è DEBUG: √öltima se√ß√£o adicionada: {secao_atual['titulo']} ({len(secao_atual['conteudo'])} caracteres)")
        
        print(f"\n‚ÑπÔ∏è DEBUG: Total de se√ß√µes identificadas: {len(secoes)}")
        
        # Se n√£o houver se√ß√µes identificadas, tratar o texto inteiro como uma √∫nica se√ß√£o
        if not secoes:
            print("\n‚ö†Ô∏è AVISO: Nenhuma se√ß√£o identificada no script. Usando texto completo como uma √∫nica se√ß√£o.")
            texto_limpo = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', script_texto)
            # Criar objeto gTTS b√°sico
            tts = gTTS(text=texto_limpo, lang='pt', slow=False)
            tts.save(nome_arquivo_final)
            print(f"‚úÖ √Åudio b√°sico do podcast gerado com sucesso: {nome_arquivo_final}")
            return nome_arquivo_final
        
        # Se pydub estiver dispon√≠vel, criar um podcast com m√∫ltiplas vozes e transi√ß√µes
        if PYDUB_AVAILABLE:
            print("\n‚ÑπÔ∏è DEBUG: Usando pydub para processamento avan√ßado de √°udio")
            try:
                # Criar diret√≥rio tempor√°rio para arquivos de √°udio
                temp_dir = "temp_audio"
                print(f"\n‚ÑπÔ∏è DEBUG: Criando diret√≥rio tempor√°rio: {temp_dir}")
                os.makedirs(temp_dir, exist_ok=True)
                
                # Inicializar √°udio completo
                print("\n‚ÑπÔ∏è DEBUG: Inicializando segmento de √°udio vazio")
                audio_completo = AudioSegment.silent(duration=500)  # Come√ßar com meio segundo de sil√™ncio
                
                # Adicionar introdu√ß√£o
                print("\n‚ÑπÔ∏è DEBUG: Gerando √°udio de introdu√ß√£o")
                intro_text = f"Bem-vindo ao {titulo_podcast}. Um podcast gerado por IA que traz os principais insights sobre o tema de hoje."
                intro_file = os.path.join(temp_dir, f"intro_{timestamp}.mp3")
                print(f"\n‚ÑπÔ∏è DEBUG: Salvando introdu√ß√£o em: {intro_file}")
                tts_intro = gTTS(text=intro_text, lang='pt', slow=False)
                tts_intro.save(intro_file)
                
                # Verificar se o arquivo foi criado
                if os.path.exists(intro_file):
                    print(f"\n‚ÑπÔ∏è DEBUG: Arquivo de introdu√ß√£o criado com sucesso. Tamanho: {os.path.getsize(intro_file)} bytes")
                else:
                    print(f"\n‚ùå ERRO: Arquivo de introdu√ß√£o n√£o foi criado!")
                
                # Adicionar a introdu√ß√£o ao √°udio completo
                print("\n‚ÑπÔ∏è DEBUG: Adicionando introdu√ß√£o ao √°udio completo")
                audio_completo += AudioSegment.from_mp3(intro_file)
                audio_completo += AudioSegment.silent(duration=1000)  # 1 segundo de pausa
                print("\n‚ÑπÔ∏è DEBUG: Introdu√ß√£o adicionada com sucesso")
            except Exception as e:
                print(f"\n‚ùå ERRO durante o processamento da introdu√ß√£o: {str(e)}")
                print("\n‚ùå Traceback completo:")
                traceback.print_exc()
            
            try:
                # Processar cada se√ß√£o
                print(f"\n‚ÑπÔ∏è DEBUG: Processando {len(secoes)} se√ß√µes do podcast")
                for i, secao in enumerate(secoes):
                    print(f"\n‚ÑπÔ∏è DEBUG: Processando se√ß√£o {i+1}/{len(secoes)}: {secao['titulo']}")
                    # Limpar formata√ß√£o markdown do conte√∫do
                    texto_secao = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', secao["conteudo"])
                    print(f"\n‚ÑπÔ∏è DEBUG: Texto da se√ß√£o limpo, tamanho: {len(texto_secao)} caracteres")
                    
                    # An√∫ncio da se√ß√£o
                    if i > 0:  # N√£o anunciar a primeira se√ß√£o se for a introdu√ß√£o
                        print(f"\n‚ÑπÔ∏è DEBUG: Gerando an√∫ncio para a se√ß√£o {secao['titulo']}")
                        anuncio_secao = f"Agora, vamos para a se√ß√£o: {secao['titulo']}."
                        anuncio_file = os.path.join(temp_dir, f"anuncio_secao_{i}_{timestamp}.mp3")
                        tts_anuncio = gTTS(text=anuncio_secao, lang='pt', slow=False)
                        tts_anuncio.save(anuncio_file)
                        print(f"\n‚ÑπÔ∏è DEBUG: An√∫ncio salvo em {anuncio_file}")
                        
                        audio_completo += AudioSegment.from_mp3(anuncio_file)
                        audio_completo += AudioSegment.silent(duration=700)  # Pausa curta
                        print("\n‚ÑπÔ∏è DEBUG: An√∫ncio adicionado ao √°udio completo")
                    
                    # Conte√∫do da se√ß√£o
                    print(f"\n‚ÑπÔ∏è DEBUG: Gerando √°udio para o conte√∫do da se√ß√£o {i+1}")
                    secao_file = os.path.join(temp_dir, f"secao_{i}_{timestamp}.mp3")
                    tts_secao = gTTS(text=texto_secao, lang='pt', slow=False)
                    tts_secao.save(secao_file)
                    print(f"\n‚ÑπÔ∏è DEBUG: √Åudio da se√ß√£o salvo em {secao_file}")
                    
                    audio_completo += AudioSegment.from_mp3(secao_file)
                    audio_completo += AudioSegment.silent(duration=1000)  # Pausa entre se√ß√µes
                    print("\n‚ÑπÔ∏è DEBUG: Conte√∫do da se√ß√£o adicionado ao √°udio completo")
                
                # Adicionar conclus√£o
                print("\n‚ÑπÔ∏è DEBUG: Gerando √°udio de conclus√£o")
                outro_text = f"Isso conclui nosso podcast de hoje sobre {titulo_podcast}. Obrigado por ouvir e at√© o pr√≥ximo epis√≥dio!"
                outro_file = os.path.join(temp_dir, f"outro_{timestamp}.mp3")
                tts_outro = gTTS(text=outro_text, lang='pt', slow=False)
                tts_outro.save(outro_file)
                print(f"\n‚ÑπÔ∏è DEBUG: √Åudio de conclus√£o salvo em {outro_file}")
                
                audio_completo += AudioSegment.from_mp3(outro_file)
                print("\n‚ÑπÔ∏è DEBUG: Conclus√£o adicionada ao √°udio completo")
                
                # Exportar √°udio final
                print(f"\n‚ÑπÔ∏è DEBUG: Exportando √°udio final para {nome_arquivo_final}")
                audio_completo.export(nome_arquivo_final, format="mp3")
                print(f"\n‚ÑπÔ∏è DEBUG: √Åudio final exportado com sucesso")
                
                # Limpar arquivos tempor√°rios
                print("\n‚ÑπÔ∏è DEBUG: Limpando arquivos tempor√°rios")
                for arquivo in os.listdir(temp_dir):
                    try:
                        os.remove(os.path.join(temp_dir, arquivo))
                        print(f"\n‚ÑπÔ∏è DEBUG: Arquivo tempor√°rio removido: {arquivo}")
                    except Exception as e:
                        print(f"\n‚ö†Ô∏è AVISO: Erro ao remover arquivo tempor√°rio {arquivo}: {e}")
                try:
                    os.rmdir(temp_dir)
                    print(f"\n‚ÑπÔ∏è DEBUG: Diret√≥rio tempor√°rio {temp_dir} removido")
                except Exception as e:
                    print(f"\n‚ö†Ô∏è AVISO: Erro ao remover diret√≥rio tempor√°rio: {e}")
                
                duracao_segundos = len(audio_completo) / 1000.0
                print(f"‚úÖ Podcast gerado com sucesso: {nome_arquivo_final}")
                print(f"   Dura√ß√£o: {int(duracao_segundos // 60)}m {int(duracao_segundos % 60)}s")
                return nome_arquivo_final
                
            except Exception as e:
                print(f"\n‚ùå ERRO durante o processamento das se√ß√µes ou finaliza√ß√£o: {str(e)}")
                print("\n‚ùå Traceback completo:")
                traceback.print_exc()
                # Tentar limpar arquivos tempor√°rios mesmo em caso de erro
                if 'temp_dir' in locals():
                    print("\n‚ÑπÔ∏è Tentando limpar arquivos tempor√°rios ap√≥s erro...")
                    try:
                        for arquivo in os.listdir(temp_dir):
                            try:
                                os.remove(os.path.join(temp_dir, arquivo))
                            except:
                                pass
                        try:
                            os.rmdir(temp_dir)
                        except:
                            pass
                    except:
                        pass
        else:
            # Vers√£o simplificada sem pydub
            print("\n‚ÑπÔ∏è DEBUG: pydub n√£o dispon√≠vel, usando m√©todo simplificado de gera√ß√£o de √°udio")
            try:
                texto_completo = f"Bem-vindo ao {titulo_podcast}. \n\n"
                print("\n‚ÑπÔ∏è DEBUG: Iniciando constru√ß√£o do texto completo para s√≠ntese")
                
                for i, secao in enumerate(secoes):
                    print(f"\n‚ÑπÔ∏è DEBUG: Processando se√ß√£o {i+1}/{len(secoes)}: {secao['titulo']}")
                    texto_limpo = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', secao["conteudo"])
                    texto_completo += f"Se√ß√£o: {secao['titulo']}\n{texto_limpo}\n\n"
                    print(f"\n‚ÑπÔ∏è DEBUG: Se√ß√£o {secao['titulo']} adicionada ao texto completo")
                
                texto_completo += f"Isso conclui nosso podcast de hoje sobre {titulo_podcast}. Obrigado por ouvir!"
                print("\n‚ÑπÔ∏è DEBUG: Conclus√£o adicionada ao texto completo")
                
                # Remover qualquer formata√ß√£o markdown restante
                texto_final = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', texto_completo)
                print(f"\n‚ÑπÔ∏è DEBUG: Texto final preparado para s√≠ntese, tamanho: {len(texto_final)} caracteres")
                
                # Verificar tamanho do texto (gTTS pode ter problemas com textos muito longos)
                if len(texto_final) > 100000:
                    print(f"\n‚ö†Ô∏è AVISO: Texto muito longo ({len(texto_final)} caracteres), pode causar problemas com gTTS")
                    # Truncar o texto se for muito longo
                    texto_final = texto_final[:99000] + "\n\nO texto foi truncado devido ao tamanho. Obrigado por ouvir!"
                    print("\n‚ÑπÔ∏è DEBUG: Texto truncado para evitar problemas com gTTS")
                
                # Criar objeto gTTS
                print("\n‚ÑπÔ∏è DEBUG: Criando objeto gTTS para s√≠ntese de voz")
                tts = gTTS(text=texto_final, lang='pt', slow=False)
                
                # Salvar o arquivo de √°udio
                print(f"\n‚ÑπÔ∏è DEBUG: Salvando √°udio em {nome_arquivo_final}")
                tts.save(nome_arquivo_final)
                
                # Verificar se o arquivo foi criado
                if os.path.exists(nome_arquivo_final):
                    tamanho_arquivo = os.path.getsize(nome_arquivo_final)
                    print(f"\n‚ÑπÔ∏è DEBUG: Arquivo de √°udio criado com sucesso. Tamanho: {tamanho_arquivo} bytes")
                else:
                    print(f"\n‚ùå ERRO: Arquivo de √°udio n√£o foi criado!")
                
                print(f"‚úÖ √Åudio do podcast gerado com sucesso: {nome_arquivo_final}")
                return nome_arquivo_final
                
            except Exception as e:
                print(f"\n‚ùå ERRO durante a gera√ß√£o simplificada de √°udio: {str(e)}")
                print("\n‚ùå Traceback completo:")
                traceback.print_exc()
                return f"Ocorreu um erro ao gerar o √°udio do podcast: {str(e)}"

    
    except Exception as e:
        print(f"‚ùå Erro ao gerar o √°udio do podcast: {str(e)}")
        print("‚ùå Traceback completo do erro:")
        traceback.print_exc()
        return f"Ocorreu um erro ao gerar o √°udio do podcast: {str(e)}"
