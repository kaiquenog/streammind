import re
from datetime import datetime
from gtts import gTTS
from pydub import AudioSegment


def agente_sintetizador_voz(script_texto):
    """Agente que converte o script do podcast em √°udio com formato de podcast"""
    print("\nüîä PASSO 5: Gerando √°udio do podcast...")
    print("Tentando gerar √°udio a partir do script...")
    
    try:
        # Nome base do arquivo de sa√≠da
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        nome_arquivo_final = f"podcast_audio_{timestamp}.mp3"
        
        # Extrair t√≠tulo do podcast do script (assumindo que est√° na primeira linha ap√≥s # ou ## )
        linhas = script_texto.split('\n')
        titulo_podcast = "Podcast StreamMind"  # T√≠tulo padr√£o
        for linha in linhas[:10]:  # Verificar apenas as primeiras linhas
            if linha.startswith('#') and not linha.startswith('##'):
                titulo_podcast = re.sub(r'#+ ', '', linha).strip()
                break
        
        # Dividir o script em se√ß√µes para processamento separado
        # Identificar se√ß√µes por cabe√ßalhos markdown (##)
        secoes = []
        secao_atual = {"titulo": "Introdu√ß√£o", "conteudo": ""}
        
        for linha in linhas:
            if linha.startswith('##'):
                if secao_atual["conteudo"].strip():
                    secoes.append(secao_atual)
                secao_atual = {"titulo": re.sub(r'#+ ', '', linha).strip(), "conteudo": ""}
            else:
                secao_atual["conteudo"] += linha + "\n"
        
        # Adicionar a √∫ltima se√ß√£o se tiver conte√∫do
        if secao_atual["conteudo"].strip():
            secoes.append(secao_atual)
        
        # Se n√£o houver se√ß√µes identificadas, tratar o texto inteiro como uma √∫nica se√ß√£o
        if not secoes:
            texto_limpo = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', script_texto)
            # Criar objeto gTTS b√°sico
            tts = gTTS(text=texto_limpo, lang='pt', slow=False)
            tts.save(nome_arquivo_final)
            print(f"‚úÖ √Åudio b√°sico do podcast gerado com sucesso: {nome_arquivo_final}")
            return nome_arquivo_final
        
        # Se pydub estiver dispon√≠vel, criar um podcast com m√∫ltiplas vozes e transi√ß√µes
        if PYDUB_AVAILABLE:
            # Criar diret√≥rio tempor√°rio para arquivos de √°udio
            temp_dir = "temp_audio"
            os.makedirs(temp_dir, exist_ok=True)
            
            # Inicializar √°udio completo
            audio_completo = AudioSegment.silent(duration=500)  # Come√ßar com meio segundo de sil√™ncio
            
            # Adicionar introdu√ß√£o
            intro_text = f"Bem-vindo ao {titulo_podcast}. Um podcast gerado por IA que traz os principais insights sobre o tema de hoje."
            intro_file = os.path.join(temp_dir, f"intro_{timestamp}.mp3")
            tts_intro = gTTS(text=intro_text, lang='pt', slow=False)
            tts_intro.save(intro_file)
            
            # Adicionar a introdu√ß√£o ao √°udio completo
            audio_completo += AudioSegment.from_mp3(intro_file)
            audio_completo += AudioSegment.silent(duration=1000)  # 1 segundo de pausa
            
            # Processar cada se√ß√£o
            for i, secao in enumerate(secoes):
                # Limpar formata√ß√£o markdown do conte√∫do
                texto_secao = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', secao["conteudo"])
                
                # An√∫ncio da se√ß√£o
                if i > 0:  # N√£o anunciar a primeira se√ß√£o se for a introdu√ß√£o
                    anuncio_secao = f"Agora, vamos para a se√ß√£o: {secao['titulo']}."
                    anuncio_file = os.path.join(temp_dir, f"anuncio_secao_{i}_{timestamp}.mp3")
                    tts_anuncio = gTTS(text=anuncio_secao, lang='pt', slow=False)
                    tts_anuncio.save(anuncio_file)
                    
                    audio_completo += AudioSegment.from_mp3(anuncio_file)
                    audio_completo += AudioSegment.silent(duration=700)  # Pausa curta
                
                # Conte√∫do da se√ß√£o
                secao_file = os.path.join(temp_dir, f"secao_{i}_{timestamp}.mp3")
                tts_secao = gTTS(text=texto_secao, lang='pt', slow=False)
                tts_secao.save(secao_file)
                
                audio_completo += AudioSegment.from_mp3(secao_file)
                audio_completo += AudioSegment.silent(duration=1000)  # Pausa entre se√ß√µes
            
            # Adicionar conclus√£o
            outro_text = f"Isso conclui nosso podcast de hoje sobre {titulo_podcast}. Obrigado por ouvir e at√© o pr√≥ximo epis√≥dio!"
            outro_file = os.path.join(temp_dir, f"outro_{timestamp}.mp3")
            tts_outro = gTTS(text=outro_text, lang='pt', slow=False)
            tts_outro.save(outro_file)
            
            audio_completo += AudioSegment.from_mp3(outro_file)
            
            # Exportar √°udio final
            audio_completo.export(nome_arquivo_final, format="mp3")
            
            # Limpar arquivos tempor√°rios
            for arquivo in os.listdir(temp_dir):
                try:
                    os.remove(os.path.join(temp_dir, arquivo))
                except Exception as e:
                    print(f"Erro ao remover arquivo tempor√°rio: {e}")
            try:
                os.rmdir(temp_dir)
            except Exception as e:
                print(f"Erro ao remover diret√≥rio tempor√°rio: {e}")
            
            duracao_segundos = len(audio_completo) / 1000.0
            print(f"‚úÖ Podcast gerado com sucesso: {nome_arquivo_final}")
            print(f"   Dura√ß√£o: {int(duracao_segundos // 60)}m {int(duracao_segundos % 60)}s")
            return nome_arquivo_final
        else:
            # Vers√£o simplificada sem pydub
            texto_completo = f"Bem-vindo ao {titulo_podcast}. \n\n"
            
            for secao in secoes:
                texto_limpo = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', secao["conteudo"])
                texto_completo += f"Se√ß√£o: {secao['titulo']}\n{texto_limpo}\n\n"
            
            texto_completo += f"Isso conclui nosso podcast de hoje sobre {titulo_podcast}. Obrigado por ouvir!"
            
            # Remover qualquer formata√ß√£o markdown restante
            texto_final = re.sub(r'#+ |\*\*|\*|`|_|\[|\]\(.*?\)', '', texto_completo)
            
            # Criar objeto gTTS
            tts = gTTS(text=texto_final, lang='pt', slow=False)
            
            # Salvar o arquivo de √°udio
            tts.save(nome_arquivo_final)
            
            print(f"‚úÖ √Åudio do podcast gerado com sucesso: {nome_arquivo_final}")
            return nome_arquivo_final
    
    except Exception as e:
        print(f"‚ùå Erro ao gerar o √°udio do podcast: {str(e)}")
        return "Ocorreu um erro ao gerar o √°udio do podcast."
